{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const getProducts = createAsyncThunk(\"products/getProducts\", async (dispatch, getState) => {\n  return await fetch(\"https://app.rakuten.co.jp/services/api/IchibaItem/Search/20170706?applicationId=1078733059924735380&keyword=a&sort=%2BitemPrice\").then(res => res.json());\n});\nexport const productsSlice = createSlice({\n  name: \"product\",\n  initialState: {\n    products: [],\n    status: \"\"\n  },\n  reducers: {},\n  extraReducers: {\n    [getProducts.pending.toString()]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getProducts.fulfilled.toString()]: (state, action) => {\n      state.status = \"success\";\n      state.products = action.payload;\n    },\n    [getProducts.rejected.toString()]: (state, action) => {\n      state.status = \"failed\";\n    }\n  }\n});\nexport default productsSlice.reducer;","map":{"version":3,"sources":["/Users/pyotoru/Desktop/Work/Trial/rakuten-products-app-master/src/features/products/productsSlice.tsx"],"names":["createSlice","createAsyncThunk","getProducts","dispatch","getState","fetch","then","res","json","productsSlice","name","initialState","products","status","reducers","extraReducers","pending","toString","state","action","fulfilled","payload","rejected","reducer"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,gBAArB,QAA4C,kBAA5C;AAGA,OAAO,MAAMC,WAAW,GAAGD,gBAAgB,CACzC,sBADyC,EAEzC,OAAOE,QAAP,EAAiBC,QAAjB,KAA8B;AAC5B,SAAO,MAAMC,KAAK,CAChB,iIADgB,CAAL,CAEXC,IAFW,CAELC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAFH,CAAb;AAGD,CANwC,CAApC;AASP,OAAO,MAAMC,aAAa,GAAGT,WAAW,CAAC;AACvCU,EAAAA,IAAI,EAAE,SADiC;AAEvCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE,EADE;AAEZC,IAAAA,MAAM,EAAE;AAFI,GAFyB;AAMvCC,EAAAA,QAAQ,EAAE,EAN6B;AAOvCC,EAAAA,aAAa,EAAE;AACb,KAACb,WAAW,CAACc,OAAZ,CAAoBC,QAApB,EAAD,GAAkC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnDD,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACX,WAAW,CAACkB,SAAZ,CAAsBH,QAAtB,EAAD,GAAoC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrDD,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACAK,MAAAA,KAAK,CAACN,QAAN,GAAiBO,MAAM,CAACE,OAAxB;AACD,KAPY;AAQb,KAACnB,WAAW,CAACoB,QAAZ,CAAqBL,QAArB,EAAD,GAAmC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpDD,MAAAA,KAAK,CAACL,MAAN,GAAe,QAAf;AACD;AAVY;AAPwB,CAAD,CAAjC;AAqBP,eAAeJ,aAAa,CAACc,OAA7B","sourcesContent":["import {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\nimport Main from \"/Users/wawrz/OneDrive/Desktop/Reforma/react-redux/my-app/src/components/Main\";\n\nexport const getProducts = createAsyncThunk(\n  \"products/getProducts\",\n  async (dispatch, getState) => {\n    return await fetch(\n      \"https://app.rakuten.co.jp/services/api/IchibaItem/Search/20170706?applicationId=1078733059924735380&keyword=a&sort=%2BitemPrice\"\n    ).then((res) => res.json());\n  }\n);\n\nexport const productsSlice = createSlice({\n  name: \"product\",\n  initialState: {\n    products: [],\n    status: \"\",\n  },\n  reducers: {},\n  extraReducers: {\n    [getProducts.pending.toString()]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getProducts.fulfilled.toString()]: (state, action) => {\n      state.status = \"success\";\n      state.products = action.payload;\n    },\n    [getProducts.rejected.toString()]: (state, action) => {\n      state.status = \"failed\";\n    },\n  },\n});\n\nexport default productsSlice.reducer;\nexport type RootState = ReturnType<any>;\n"]},"metadata":{},"sourceType":"module"}